/*
LICENCIA JOSE JAVIER BO
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
Lista de paquetes:
 */
package ud2_04.gui.ventanas;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import ud2_04.controlador.Controlador;
import ud2_04.gui.tablemodels.GenericoTableModel;

/**
 *
 * @author Jose Javier Bailon Ortiz
 */
public class Vista extends javax.swing.JFrame implements ActionListener, KeyListener {

    private Controlador controlador;

    /**
     * Creates new form Ventana
     */
    public Vista() {
    }

    /**
     * Define la referencia al controlador y hace los ajustes iniciales
     *
     * @param controlador Referencia al controlador
     */
    public void setControlador(Controlador controlador) {
        this.controlador = controlador;
        initComponents();
        initPropio();
    }

    private void initPropio() {
        eventos();
        actualizarTablas();
    }

    public void msgError(String msg) {
        JOptionPane.showMessageDialog(this, msg, "error", JOptionPane.ERROR_MESSAGE);
    }

    public void msgInfo(String msg) {
        JOptionPane.showMessageDialog(this, msg, "error", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Muestra un mensaje de confirmacion
     *
     * @param msg
     * @return
     */
    private boolean confirmar(String msg) {
        Object[] opciones = {"Sí", "No"};
        return JOptionPane.showOptionDialog(this,
                msg,
                "Aviso",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE,
                null,
                opciones,
                "default") == JOptionPane.YES_OPTION;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbTablas = new javax.swing.JLabel();
        inputTablas = new javax.swing.JComboBox<>();
        lbColumnas = new javax.swing.JLabel();
        inputColumnas = new javax.swing.JComboBox<>();
        lbOperador = new javax.swing.JLabel();
        inputOperador = new javax.swing.JComboBox<>();
        lbValor = new javax.swing.JLabel();
        inputValor = new javax.swing.JTextField();
        inputSentencia = new javax.swing.JTextField();
        btnEjecutar = new javax.swing.JButton();
        scrollTabla = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbTablas.setText("Tablas:");

        inputTablas.setActionCommand("tablas");

        lbColumnas.setText("Columnas:");

        inputColumnas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        inputColumnas.setActionCommand("columnas");

        lbOperador.setText("Operador:");

        inputOperador.setActionCommand("operador");

        lbValor.setText("Valor:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lbTablas))
                            .addComponent(inputColumnas, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbColumnas))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbOperador)
                            .addComponent(inputOperador, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbValor)
                            .addComponent(inputValor, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(inputTablas, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(170, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbTablas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbOperador)
                    .addComponent(lbValor)
                    .addComponent(lbColumnas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputColumnas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputOperador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnEjecutar.setText("Ejecutar");
        btnEjecutar.setActionCommand("ejecutar");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scrollTabla.setViewportView(tabla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollTabla, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputSentencia)
                        .addGap(18, 18, 18)
                        .addComponent(btnEjecutar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputSentencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEjecutar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollTabla, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JComboBox<String> inputColumnas;
    private javax.swing.JComboBox<String> inputOperador;
    private javax.swing.JTextField inputSentencia;
    private javax.swing.JComboBox<String> inputTablas;
    private javax.swing.JTextField inputValor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbColumnas;
    private javax.swing.JLabel lbOperador;
    private javax.swing.JLabel lbTablas;
    private javax.swing.JLabel lbValor;
    private javax.swing.JScrollPane scrollTabla;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    private void eventos() {
        inputTablas.addActionListener(this);
        inputColumnas.addActionListener(this);
        inputOperador.addActionListener(this);
        btnEjecutar.addActionListener(this);
        inputValor.addKeyListener(this);

    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String ac = e.getActionCommand();
        switch (ac) {
            case "tablas" ->
                actualizarColumnas();
            case "columnas" ->
                actualizarOperador();
            case "operador" ->
                actualizarSentencia();
            case "ejecutar" ->
                ejecutarSentencia();
            default ->
                throw new AssertionError();
        }
    }

    private void actualizarTablas() {
        String[] tablas = controlador.getTablas();
        inputTablas.setModel(new DefaultComboBoxModel<>(tablas));
        inputTablas.setSelectedIndex(0);
    }

    private void actualizarColumnas() {
        String[] columnas = controlador.getColumnas(inputTablas.getSelectedIndex());
        inputColumnas.setModel(new DefaultComboBoxModel<>(columnas));
        inputColumnas.setSelectedIndex(0);
    }

    private void actualizarOperador() {
        getTipo();
        int tbl = inputTablas.getSelectedIndex();
        int columna = inputColumnas.getSelectedIndex();
        int[] tipos = controlador.getTipos(tbl);
        String[] operadores = controlador.getOperaciones(getTipo());
        inputOperador.setModel(new DefaultComboBoxModel<>(operadores));
        inputOperador.setSelectedIndex(0);
    }

    private void actualizarSentencia() {
        String tbl = inputTablas.getSelectedItem().toString();
        String col = inputColumnas.getSelectedItem().toString();
        String oper = inputOperador.getSelectedItem().toString();
        String comilla = (controlador.ponerComillas(getTipo())) ? "`" : "";
        String valor = inputValor.getText();
        inputSentencia.setText("SELECT * FROM `" + tbl + "` WHERE `" + col + "` " + oper + " " + comilla + valor + comilla + ";");
    }

    private int getTipo() {
        int tbl = inputTablas.getSelectedIndex();
        int columna = inputColumnas.getSelectedIndex();
        int[] tipos = controlador.getTipos(tbl);
        return tipos[columna];
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        actualizarSentencia();
    }

    private void ejecutarSentencia() {
        ResultSet rs = controlador.ejecutarSentencia(inputSentencia.getText());
        if (rs != null) {
            //si hay resulset
            try {
                //nombres de columnas
                ArrayList<String> nombresColumnas = new ArrayList<String>();
                ResultSetMetaData rsmd = rs.getMetaData();
                int nCol = rsmd.getColumnCount();
                for (int i = 1; i <= nCol; i++) {
                    nombresColumnas.add(rsmd.getColumnName(i));
                }
                
                //recoger los datos del resultset
                ArrayList<ArrayList<String>> datosTabla = new ArrayList<ArrayList<String>>();
                while (rs.next()) {
                    ArrayList<String> tupla = new ArrayList<String>();
                    for (int j = 1; j <= nCol; j++) {
                        tupla.add(rs.getString(j));
                    }
                    datosTabla.add(tupla);
                }
                
                //Rellenar tabla
                GenericoTableModel modelo = new GenericoTableModel(datosTabla, nombresColumnas.toArray(new String[0]));
                tabla.setModel(modelo);
                
            } catch (SQLException ex) {
                msgError(ex.getMessage());
            }
        }else{
            msgError(controlador.getUltimoError());
        }
        
    }

}//fin Ventana
